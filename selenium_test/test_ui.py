# Generated by Selenium IDE
import pytest
import time
import os  # Import necesario para leer variables de entorno
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.chrome.options import Options  # Asegúrate de importar esto

class TestUI():
  def setup_method(self, method):
    chrome_options = Options()
    chrome_options.add_argument("--headless")  # Modo headless
    chrome_options.add_argument("--no-sandbox")  # Evita restricciones de sandboxing
    chrome_options.add_argument("--disable-dev-shm-usage")  # Usa /dev/shm para evitar problemas de memoria
    chrome_options.add_argument("--disable-gpu")  # Deshabilita la GPU (opcional)
    chrome_options.add_argument("--window-size=1920,1080")  # Establece un tamaño de ventana
    self.driver = webdriver.Chrome(options=chrome_options)
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.driver.window_handles
    wh_then = self.vars["window_handles"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()
  
  def test_uI(self):
    self.driver.get("http://ffls-frontend-app-bucket-prod.s3-website-us-east-1.amazonaws.com/")
    self.driver.set_window_size(652, 672)

    wait = WebDriverWait(self.driver, 10)
    element = wait.until(EC.element_to_be_clickable((By.LINK_TEXT, "What\'s next?")))
    element.click()

    self.driver.find_element(By.LINK_TEXT, "What\'s next?").click()
    self.driver.find_element(By.CSS_SELECTOR, "details:nth-child(3) > summary").click()
    self.driver.find_element(By.CSS_SELECTOR, "details:nth-child(4) > summary").click()
    self.driver.find_element(By.CSS_SELECTOR, "details:nth-child(5) > summary").click()
    self.vars["window_handles"] = self.driver.window_handles
    self.driver.find_element(By.CSS_SELECTOR, ".list-item-link:nth-child(5) > span").click()
    self.vars["win5471"] = self.wait_for_window(2000)
    self.vars["root"] = self.driver.current_window_handle
    self.driver.switch_to.window(self.vars["win5471"])
    self.driver.close()
    self.driver.switch_to.window(self.vars["root"])
    self.vars["window_handles"] = self.driver.window_handles
    self.driver.find_element(By.CSS_SELECTOR, ".list-item-link:nth-child(2) > span > span").click()
    self.vars["win9931"] = self.wait_for_window(2000)
    self.driver.switch_to.window(self.vars["win9931"])
    self.driver.close()
    self.driver.switch_to.window(self.vars["root"])
    self.vars["window_handles"] = self.driver.window_handles
    self.driver.find_element(By.CSS_SELECTOR, ".list-item-link:nth-child(4) > span").click()
    self.vars["win6229"] = self.wait_for_window(2000)
    self.driver.switch_to.window(self.vars["win6229"])
    self.driver.close()
    self.driver.switch_to.window(self.vars["root"])
    self.vars["window_handles"] = self.driver.window_handles
    self.driver.find_element(By.ID, "nx-console").click()
    self.vars["win5708"] = self.wait_for_window(2000)
    self.driver.switch_to.window(self.vars["win5708"])
    self.driver.close()
    self.driver.switch_to.window(self.vars["root"])
    self.driver.close()
  
